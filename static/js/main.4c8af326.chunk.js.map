{"version":3,"sources":["Components/IlusKawai/index.js","Components/Form/index.js","App.js","serviceWorker.js","index.js"],"names":["IlusKawai","useState","color","mood","properties","setProperties","colors","moods","chooseOneItemRandom","list","Math","floor","random","length","className","onMouseOver","event","Cat","size","Form","nombre","apellido","telefono","datos","setDatos","handleInputChange","target","name","value","onSubmit","preventDefault","console","log","type","placeholder","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gTA+BeA,EA3BG,WAAO,IAAD,EAEcC,mBAAS,CAC3CC,MAAO,UACPC,KAAM,eAJc,mBAEfC,EAFe,KAEHC,EAFG,KAOhBC,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAC5EC,EAAQ,CAAC,MAAO,UAAW,QAAS,WAAY,aAAc,UAAW,MAEzEC,EAAsB,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,MAAMD,KAAKE,SAASH,EAAKI,UAUvE,OACE,yBAAKC,UAAU,qBAAqBC,YATb,SAACC,GACxBX,EAAc,eACTD,EADQ,CAEXF,MAAOM,EAAoBF,GAC3BH,KAAMK,EAAoBD,QAM1B,kBAACU,EAAA,EAAD,CAAKC,KAAM,IAAKf,KAAMC,EAAWD,KAAMD,MAAOE,EAAWF,UCkChDiB,EAvDF,WAAO,IAAD,EAESlB,mBAAS,CACjCmB,OAAQ,GACRC,SAAU,GACVC,SAAU,KALK,mBAEVC,EAFU,KAEHC,EAFG,KAQXC,EAAoB,SAACT,GACzBQ,EAAS,eACJD,EADG,eAELP,EAAMU,OAAOC,KAAQX,EAAMU,OAAOE,UASvC,OACE,yBAAKd,UAAU,kBACb,kBAAC,EAAD,MACA,0BAAMe,SARO,SAACb,GAChBA,EAAMc,iBACNC,QAAQC,IAAI,oBAAsBT,EAAMH,OAAcG,EAAMF,YAOxD,2BACEY,KAAK,OACLC,YAAY,SACZpB,UAAU,aACVqB,SAAUV,EACVE,KAAK,WAEP,2BACEM,KAAK,OACLC,YAAY,WACZpB,UAAU,aACVqB,SAAUV,EACVE,KAAK,aAEP,2BACEM,KAAK,SACLC,YAAY,WACZpB,UAAU,aACVqB,SAAUV,EACVE,KAAK,aAEP,2BACEb,UAAU,oBACVmB,KAAK,SACLL,MAAM,c,MCzCDQ,MARf,WACE,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,QCKcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4c8af326.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './IlusKawai.css';\nimport { Cat } from 'react-kawaii';\n\nconst IlusKawai = () => {\n\n  const [properties, setProperties] = useState({\n    color: '#596881',\n    mood: 'lovestruck'\n  });\n\n  const colors = ['#596881', '#FFC0CB', '#F4ADB0', '#EDB5F5', '#9AE0E2', '#80D3F8', '#FBD233'];\n  const moods = ['sad', 'shocked', 'happy', 'blissful', 'lovestruck', 'excited', 'ko'];\n\n  const chooseOneItemRandom = list => list[Math.floor(Math.random()*list.length)];\n\n  const handleMouseHover = (event) => {\n    setProperties({\n      ...properties,\n      color: chooseOneItemRandom(colors),\n      mood: chooseOneItemRandom(moods),\n    });\n  };\n\n  return(\n    <div className=\"ilus-kawai-wrapper\" onMouseOver={handleMouseHover}>\n      <Cat size={320} mood={properties.mood} color={properties.color} />\n    </div>\n  );\n};\n\nexport default IlusKawai;","import React, { useState } from 'react';\nimport './Form.css';\nimport IlusKawai from '../IlusKawai';\n\n\nconst Form = () => {\n\n  const [datos, setDatos] = useState({\n    nombre: '',\n    apellido: '',\n    telefono: ''\n  });\n\n  const handleInputChange = (event) => {\n    setDatos({\n      ...datos,\n      [event.target.name] : event.target.value\n    });\n  };\n\n  const sendData = (event) => {\n    event.preventDefault();\n    console.log('Enviando datos...' + datos.nombre + '' + datos.apellido);\n  };\n\n  return (\n    <div className='form-container'>\n      <IlusKawai />\n      <form onSubmit={sendData}>\n        <input\n          type=\"text\"\n          placeholder=\"Nombre\"\n          className=\"form-input\"\n          onChange={handleInputChange}\n          name=\"nombre\"\n          ></input>\n        <input\n          type=\"text\"\n          placeholder=\"Apellido\"\n          className=\"form-input\"\n          onChange={handleInputChange}\n          name=\"apellido\"\n        ></input>\n        <input\n          type=\"number\"\n          placeholder=\"Telefono\"\n          className=\"form-input\"\n          onChange={handleInputChange}\n          name=\"telefono\"\n        ></input>\n        <input\n          className=\"form-input submit\"\n          type=\"submit\"\n          value=\"Submit\"\n        />\n      </form>\n  </div>\n  )\n};\n\nexport default Form;\n\n","import React from 'react';\nimport Form from './Components/Form';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}